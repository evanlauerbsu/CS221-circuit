****************

* Circuit
* CS 221
* 26 April 2024
* Evan Lauer

****************

OVERVIEW:

  CircuitTracer is a program that analyses an input file representing a circuit board that has a starting point to connect to an ending point as well as occupied and unoccupied spaces. It then outputs the shortest traces that can connect the starting point to the ending point.

INCLUDED FILES:

* CircuitTracer.java - source file
* CircuitBoard.java - source file
* InvalidFileFormatException.java - source file
* OccupiedPositionException.java - source file
* Storage.java - source file
* TraceState.java - source file
* README - this file

COMPILING AND RUNNING:

 From the directory containing all source files, compile the
 driver class (and all dependencies) with the command:
 $ javac CircuitTracer.java

 Run the compiled class file with the command:
 $ java CircuitTracer <-s | -q> <-c | -g> filename
 where -s uses a stack internally
       -q uses a queue internally
       -c is console output
       -g is GUI output

 Console output will give the results after the program finishes if -c is selected.

 The GUI is not yet implemented so -g will result in a unsupported option message being printed to the console

PROGRAM DESIGN AND IMPORTANT CONCEPTS:

 This is the sort of information someone who really wants to
 understand your program - possibly to make future enhancements -
 would want to know.

 Explain the main concepts and organization of your program so that
 the reader can understand how your program works. This is not a repeat
 of javadoc comments or an exhaustive listing of all methods, but an
 explanation of the critical algorithms and object interactions that make
 up the program.

 CircuitTracer has a CircuitBoard that it builds from the

 Explain the main responsibilities of the classes and interfaces that make
 up the program. Explain how the classes work together to achieve the program
 goals. If there are critical algorithms that a user should understand,
 explain them as well.

 If you were responsible for designing the program's classes and choosing
 how they work together, why did you design the program this way? What, if
 anything, could be improved?

ANALYSIS:

 i.
  The queue will search the circuit board in such a way that it produces all possible solutions of length 1 followed by all possible solutions of length 2 and so on. The stack will search the circuit board in such a way that it searches on path to completeness and then searches another path starting at the most recent branch from the current path.
 ii.
  The total number of paths is not affected by the choice of stack or queue because the algorithm is written in such a way that it searches all possible paths. The algorithm would be more efficient if it used a queue implementation and stopped searching once the current branch being searched had a greater length than the current solution.
 iii.
  In the manual simulation that I ran, the stack found a solution in fewer steps than the queue. Because it searches one path to completion before attempting others, I think that the stack would find a solution fastest in most situations.
 iv.
  The queue guarantees that the first solution found will be the shortest because it searches paths in order of ascending length.
 v.
  The stack will use less maximum memory at one time than the queue because it only has to store the current path and the possible branches from the current path found at previous stages. The queue at worst can store all possible solutions of one or two different lengths which tends to be larger than a queue.
 vi.
  Looking at my manual simulations, it appears that "n" is the maximum possible path length and the algorithm is O(n^2).

TESTING:

  I used the CircuitTracerTester to test my program. When I ran into errors, I reviewed the error message given by the tester and manually looked over my program to find the issue. I sometimes added print statements to track certain issues. For instance, I had an infinite loop issue that I ended up solving with a print statement. After my program passed all tests in the tester, I manually tested the program in the console using a few different input files and command line arguments.

DISCUSSION:

 Discuss the issues you encountered during programming (development)
 and testing. What problems did you have? What did you have to research
 and learn on your own? What kinds of errors did you get? How did you
 fix them?

 What parts of the project did you find challenging? Is there anything
 that finally "clicked" for you in the process of working on this project?
