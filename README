****************
* Circuit
* CS 221
* 26 April 2024
* Evan Lauer
****************

OVERVIEW:

  CircuitTracer is a program that analyses an input file representing a circuit board that has a starting point to connect to an ending point as well as occupied and unoccupied spaces. It then outputs the shortest traces that can connect the starting point to the ending point.


INCLUDED FILES:

 * CircuitTracer.java - source file
 * CircuitBoard.java - source file
 * InvalidFileFormatException.java - source file
 * OccupiedPositionException.java - source file
 * Storage.java - source file
 * TraceState.java - source file
 * README - this file


COMPILING AND RUNNING:

 From the directory containing all source files, compile the
 driver class (and all dependencies) with the command:
 $ javac CircuitTracer.java

 Run the compiled class file with the command:
 $ java CircuitTracer <-s | -q> <-c | -g> filename
 where -s uses a stack internally
       -q uses a queue internally
       -c is console output
       -g is GUI output 

 Console output will give the results after the program finishes if -c is selected.
 
 The GUI is not yet implemented so -g will result in a unsupported option message being printed to the console


PROGRAM DESIGN AND IMPORTANT CONCEPTS:

 CircuitTracer has a CircuitBoard constructed from the input file. It uses this to create the initial TraceStates representing each of the possible paths with a length of 1 originating from the starting point of CircuitBoard. It has a Storage object with an internal representation of either a stack or queue depending on the command line arguments. This Storage object is used to store the TraceStates.
 
 Input files are given in the format:
 
  first line: (# of rows as r) (# of columns as c)
    row 1: (c items where an item can be X, O, 1, or 2)
    .
    .
    .
    row r

    X means closed
    O means open
    1 is the starting position
    2 is the ending position

    ex:
     5 6
     X O 1 O O O
     X X X O O O
     O O O O X O
     O 2 O O X O
     O X O O O O

 Output files are given in the same format as input files but contain one path from the starting position to the ending position represented with T's

 The algorithm works as follows:

  initialize an empty Storage object called stateStore that stores objects of type TraceState

  initialize an empty List called bestPaths that stores objects of type TraceState
 
  add a new initial TraceState object (a path with one trace) to stateStore for each open position adjacent to the starting component
  
  while (!stateStore.isEmpty)
    
    retrieve the next TraceState object from stateStore
    
    if that TraceState object is a solution (ends with a position adjacent to the ending component),
    
      if bestPaths is empty or the TraceState object's path is equal in length to one of the TraceStates in bestPaths,
        
        add it to bestPaths
      
      else if that TraceState object's path is shorter than the paths in bestPaths,
        
        clear bestPaths and add the current TraceState as the new shortest path
        
    else generate all valid next TraceState objects from the current TraceState and add them to stateStore


ANALYSIS:

 i.
  The queue will search the circuit board in such a way that it produces all possible solutions of length 1 followed by all possible solutions of length 2 and so on. The stack will search the circuit board in such a way that it searches on path to completeness and then searches another path starting at the most recent branch from the current path.
 ii.
  The total number of paths is not affected by the choice of stack or queue because the algorithm is written in such a way that it searches all possible paths. The algorithm would be more efficient if it used a queue implementation and stopped searching once the current branch being searched had a greater length than the current solution.
 iii.
  In the manual simulation that I ran, the stack found a solution in fewer steps than the queue. Because it searches one path to completion before attempting others, I think that the stack would find a solution fastest in most situations.
 iv.
  The queue guarantees that the first solution found will be the shortest because it searches paths in order of ascending length.
 v.
  The stack will use less maximum memory at one time than the queue because it only has to store the current path and the possible branches from the current path found at previous stages. The queue at worst can store all possible solutions of one or two different lengths which tends to be larger than a queue.
 vi.
  Looking at my manual simulations, it appears that "n" is the maximum possible path length and the algorithm is O(n^2).


TESTING:

  I used the CircuitTracerTester to test my program. When I ran into errors, I reviewed the error message given by the tester and manually looked over my program to find the issue. I sometimes added print statements to track certain issues. For instance, I had an infinite loop issue that I ended up solving with a print statement. After my program passed all tests in the tester, I manually tested the program in the console using a few different input files and command line arguments.


DISCUSSION:

 It was relatively to read the file from input into a CircuitBoard. The most difficult part was correctly labeling the different kinds of errors and making sure that the filename was added to each error message. Writing CircuitTracer easy because the algorithm was given in pseudo-code and relatively little effort was needed to turn it into java code. Debugging CircuitTracer was more difficult, and I ran into several issues such as an infinite loop that I described in the "TESTING" section. I did not have to do research outside of what was given in the project description.

 The project was fairly easy. The analysis of the algorithm that I did manually was time consuming, but not very difficult. Once I did the analysis, I made the connections about what it meant fairly easily. Determining the runtime order was the hardest part.